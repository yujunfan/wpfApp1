<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls">


    <GeometryGroup x:Key="clipGeometry" FillRule="Nonzero">
        <EllipseGeometry RadiusX="40" RadiusY="40" Center="40,40"></EllipseGeometry>
    </GeometryGroup>
    <!--默认颜色-->
    <Style x:Key="primaryTextColor" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="#425177"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"></Setter>
    </Style>
    <!-- 通用按钮样式-->
    <Style x:Key="mmhButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border x:Name="buttonBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0" CornerRadius="3"  Background="#4E7CED">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center" Margin="20,0,20,0" VerticalAlignment="Center" >
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.Setters>
                                <Setter TargetName="buttonBorder" Property="Background" Value="#2E7CED"/>
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  列表蓝色按钮样式  -->
    <Style x:Key="mmhDataGridBlueButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#4E7CED" />
        <Setter Property="Height" Value="28" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border x:Name="buttonBorder" BorderBrush="#4E7CED" BorderThickness="1" CornerRadius="2" Cursor="Hand">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center" Margin="15,0,15,0" VerticalAlignment="Center" >
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.Setters>
                                <Setter TargetName="buttonBorder" Property="Background" Value="White"/>
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 列表红色按钮样式-->
    <Style x:Key="mmhDataGridRedButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#FFEE4D4D"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="FontSize" Value="14"/>

        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border x:Name="buttonBorder" BorderBrush="#FFEE4D4D" BorderThickness="1" CornerRadius="2">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center" Margin="15,0,15,0" VerticalAlignment="Center" >
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.Setters>
                                <Setter TargetName="buttonBorder" Property="Background" Value="White"/>
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 列表红色按钮样式-->
    <Style x:Key="mmhDataGridGreenButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#75C548"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="FontSize" Value="14"/>

        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border x:Name="buttonBorder" BorderBrush="#75C548" BorderThickness="1" CornerRadius="2">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center" Margin="15,0,15,0" VerticalAlignment="Center" >
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.Setters>
                                <Setter TargetName="buttonBorder" Property="Background" Value="White"/>
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 列表橙色按钮样式-->
    <Style x:Key="mmhDataGridOrangeButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#FFDE8014"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border x:Name="buttonBorder" BorderBrush="#FFDE8014" BorderThickness="1" CornerRadius="2">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center" Margin="15,0,15,0" VerticalAlignment="Center" >
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.Setters>
                                <Setter TargetName="buttonBorder" Property="Background" Value="White"/>
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 通用灰色按钮样式-->
    <Style x:Key="mmhButtonGrayStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" >
                    <Border x:Name="buttonBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0" CornerRadius="3" Background="#949CAF">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}" Margin="20,0,20,0" HorizontalAlignment="Center" VerticalAlignment="Center" >
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.Setters>
                                <Setter TargetName="buttonBorder" Property="Background" Value="#FF808080"/>
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border Name="Back" Background="Transparent" BorderThickness="0,0,0,0" BorderBrush="#FF6A6A6A" >
                        <ContentPresenter ContentSource="{Binding Source}" Margin="{TemplateBinding Padding}" HorizontalAlignment="Left" 
                                          VerticalAlignment="Center"></ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="#FFCBE3FE"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="#FFCBE3FE"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Width" Value="1000"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template" x:Name="mmhToggleButtonTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Cursor="Hand">
                        <StackPanel VerticalAlignment="Center">
                            <Path x:Name="Arrow" HorizontalAlignment="Right" VerticalAlignment="Center"
                              Data="M 0 0 L 8 8 L 16 0" Stretch="Uniform" Fill="#FF656E82"  Margin="0 0 4 0"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboboxItemContainerStyle" TargetType="ComboBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ComboBoxItem}">
                    <Grid Height="32" Width="{TemplateBinding Width}">
                        <Border x:Name="_borderbg" Background="White"/>
                        <ContentPresenter ContentSource="{Binding Source}" Margin="{TemplateBinding Padding}" HorizontalAlignment="Left" VerticalAlignment="Center"></ContentPresenter>
                        <Border x:Name="_border" Background="White" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="_borderbg"  Property="Background" Value="#4E7CED" />
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="mmhComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboboxItemContainerStyle}"/>

        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <!--Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions-->
                        <ContentPresenter Margin="10,0,0,0" HorizontalAlignment="Left" x:Name="ContentSite" VerticalAlignment="Center" 
                                          Content="{TemplateBinding SelectionBoxItem}" 
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                          IsHitTestVisible="False"/>

                        <ToggleButton HorizontalAlignment="Right" Style="{StaticResource ComboBoxToggleButton}"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" Width="{TemplateBinding Width}">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="#FFABABAB" BorderThickness="1"/>
                                <ScrollViewer Margin="1" Style="{DynamicResource SimpleScrollViewer}" Background="White"
                                              SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                    <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                    <StackPanel x:Name="PopupPanle" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="mmhContentComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboboxItemContainerStyle}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border BorderBrush="#C9CFE2" BorderThickness="1">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="24"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" Margin="10,0,0,0" HorizontalAlignment="Left" x:Name="ContentSite" VerticalAlignment="Center" 
                                  Content="{TemplateBinding SelectionBoxItem}" 
                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                  IsHitTestVisible="False"/>
                            <Image Grid.Column="1" Source="/Resources/Common/check-down.png"></Image>
                            <ToggleButton Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Right" Style="{StaticResource FlawComboBoxToggleButton}" Background="White"
              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" Width="{TemplateBinding Width}">
                                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}"  x:Name="DropDown" SnapsToDevicePixels="True">
                                    <Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="#707070" BorderThickness="1 1 1 1">
                                        <ScrollViewer  Style="{DynamicResource SimpleScrollViewer}" Background="White" 
                                              SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                            <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlawComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Width" Value="1000"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template" x:Name="mmhToggleButtonTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Cursor="Hand">
                        <StackPanel VerticalAlignment="Center">
                            <Path x:Name="Arrow" HorizontalAlignment="Right" VerticalAlignment="Center"
                              Data="M 0 0 L 8 8 L 16 0" Stretch="Uniform" Fill="White" Margin="0,0,4,0"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlawComboBoxToggleButton_v2" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Width" Value="1000"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template" x:Name="mmhToggleButtonTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Cursor="Hand">
                        <StackPanel VerticalAlignment="Center">
                            <Path HorizontalAlignment="Right" VerticalAlignment="Center" Stretch="Uniform" Margin="0,0,4,0">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure StartPoint="0,0">
                                            <LineSegment Point="6,6"/>
                                        </PathFigure>
                                        <PathFigure StartPoint="6,6">
                                            <LineSegment Point="12,0"/>
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                                <Path.Stroke>
                                    <SolidColorBrush Color="#425177"/>
                                </Path.Stroke>
                            </Path>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="FlawmmhComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboboxItemContainerStyle}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border BorderBrush="#C9CFE2" BorderThickness="1" CornerRadius="3">
                        <Grid  x:Name="grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="24"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" Margin="10,0,0,0" HorizontalAlignment="Left" x:Name="ContentSite" VerticalAlignment="Center" 
                                              Content="{TemplateBinding SelectionBoxItem}" 
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                              IsHitTestVisible="False"/>
                            <Image Grid.Column="1" Source="/Resources/Common/check-down.png"></Image>
                            <ToggleButton Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Right" Style="{StaticResource FlawComboBoxToggleButton}" Background="White"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" Width="{TemplateBinding Width}">
                                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}"  x:Name="DropDown" SnapsToDevicePixels="True">
                                    <Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="#C9CFE2" BorderThickness="1 0 1 1">
                                        <ScrollViewer  Style="{DynamicResource SimpleScrollViewer}" Background="White" 
                                                  SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                            <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.3" TargetName="grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlawmmhComboBoxStyle_v2" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboboxItemContainerStyle}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border >
                        <Grid Background="White" x:Name="grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="24"/>
                            </Grid.ColumnDefinitions>
                            <Border  BorderBrush="#DCDCDC"  BorderThickness="1,1,0,1" CornerRadius="3" >
                                <ContentPresenter Grid.Column="0" Margin="10,0,0,0" HorizontalAlignment="Left" x:Name="ContentSite" VerticalAlignment="Center" 
                                          Content="{TemplateBinding SelectionBoxItem}" 
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                          IsHitTestVisible="False"/>
                            </Border>
                            <Border  BorderBrush="#DCDCDC"  BorderThickness="0,1,1,1" CornerRadius="3"  Grid.Column="0" Grid.ColumnSpan="2">
                                <ToggleButton  HorizontalAlignment="Right" Style="{StaticResource FlawComboBoxToggleButton_v2}" Background="White"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                            </Border>
                            <Popup  IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" Width="{TemplateBinding Width}">
                                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}"  x:Name="DropDown" SnapsToDevicePixels="True">
                                    <Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="#DCDCDC"  BorderThickness="1 0 1 1">
                                        <ScrollViewer  Style="{DynamicResource SimpleScrollViewer}" Background="White" 
                                              SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                            <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.3" TargetName="grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="mmhComboBoxIsEditStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboboxItemContainerStyle}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid Background="#FF1185AA" x:Name="grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="24"/>
                        </Grid.ColumnDefinitions>
                        <Border BorderBrush="#FF707070" BorderThickness="1" Background="White">
                            <Grid>
                                <ContentPresenter Grid.Column="0" Margin="10,0,0,0" HorizontalAlignment="Left" x:Name="ContentSite" VerticalAlignment="Center" 
                                         
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                          IsHitTestVisible="False">

                                </ContentPresenter>
                                <TextBox   CharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ComboBoxHelper.CharacterCasing), Mode=OneWay}" />
                            </Grid>
                        </Border>

                        <ToggleButton Name="log" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Right" Style="{StaticResource FlawComboBoxToggleButton}" Background="White"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" Width="{TemplateBinding Width}">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}"  x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="#707070" BorderThickness="1 0 1 1">
                                    <ScrollViewer  Style="{DynamicResource SimpleScrollViewer}" Background="White" 
                                              SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                        <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.3" TargetName="grid"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="Width" Value="30" TargetName="log" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="mmhLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#425177"></Setter>
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="MarkLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#425177"></Setter>
    </Style>
    <Style x:Key="ContentLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="32"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="#C9CFE2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="#FFFAFAFA"/>
        <Setter Property="Padding" Value="10,0,0,0"/>
        <Setter Property="FontSize" Value="14"/>

    </Style>
    <Style x:Key="ContentTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="8 0 0 0"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#425177"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="BorderBrush" Value="#C9CFE2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="#FFFFFF"/>
        <Setter Property="SelectionBrush" Value="#4E7CED"></Setter>
    </Style>

    <Style x:Key="mmhListViewItemStyle" TargetType="ListViewItem">
        <Setter Property="Height" Value="40"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="ListView.AlternationIndex" Value="1">
                <Setter Property="Background" Value="#FFE0E2E3"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--datagrid表头-->
    <Style x:Key="mmhDataGridHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="BorderBrush" Value="#EDEDED"/>
        <Setter Property="Foreground" Value="#425177"/>
        <Setter Property="BorderThickness" Value="0 0 1 1"/>
        <Setter Property="Background" Value="#F9F9F9"/>
        <Setter Property="Foreground" Value="#425177"></Setter>
        <Setter Property="Height" Value="40"/>
    </Style>

    <Style x:Key="lastDataGridHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="BorderBrush" Value="#EDEDED"/>
        <Setter Property="Foreground" Value="#425177"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="Foreground" Value="#425177"></Setter>
        <Setter Property="Background" Value="#F9F9F9"/>
        <Setter Property="Height" Value="40"/>
    </Style>

    <Style x:Key="SmallmmhDataGridHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#425177"/>
        <Setter Property="BorderBrush" Value="#EDEDED"/>
        <Setter Property="BorderThickness" Value="0 0 1 1"/>
        <Setter Property="Background" Value="#F9F9F9"/>
        <Setter Property="Height" Value="36"/>
    </Style>
    <Style x:Key="SmalllastDataGridHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderBrush" Value="#ABABAB"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="Background" Value="#FFF2F2F2"/>
        <Setter Property="Height" Value="28"/>
    </Style>
    <Style x:Key="ScrollerViewDatagridRowStyle"  TargetType="DataGridRow">
        <Setter Property="Height"  Value="36" />
        <Style.Triggers>
            <!--隔行换色-->
            <Trigger Property="AlternationIndex" Value="1">
                <Setter Property="Background" Value="White" />
            </Trigger>
            <Trigger Property="AlternationIndex" Value="0">
                <Setter Property="Background" Value="White"/>
            </Trigger>
            <Trigger Property="IsMouseOver"  Value="True">
                <Setter Property="Background"  Value="#F5F6FF" />
                <!--<Setter Property="Foreground" Value="White"/>-->
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#F5F6FF" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style  x:Key="SmallRowStyle" TargetType="DataGridRow">
        <Setter Property="Height"  Value="36" />
        <Setter Property="Foreground" Value="Black" />
        <Style.Triggers>
            <!--隔行换色-->
            <Trigger Property="AlternationIndex" Value="1">
                <Setter Property="Background" Value="#FFFAFAFA" />
            </Trigger>
            <Trigger Property="IsMouseOver"  Value="True">
                <Setter Property="Background"  Value="#D2D2D2" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#D2D2D2" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style  x:Key="SmallRowOnlyReadStyle" TargetType="DataGridRow">
        <Setter Property="Height"  Value="36" />
        <Setter Property="Foreground" Value="Black" />
    </Style>


    <!--三角形按钮 -->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" CornerRadius="0" Background="#FFF2F2F2" 
                                  BorderBrush="#FFABABAB"  BorderThickness="1,0,0,0">
                        <Path HorizontalAlignment="Center" VerticalAlignment="Center"  Fill="Gray"
                                    Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background"
                                  Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                  Value="#FFE5E5E5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="0" Background="{TemplateBinding Background}"  BorderBrush="#FFABABAB" BorderThickness="1,0,0,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--滚动条背景 -->
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="#F5F6FF" BorderBrush="#EDEDED" BorderThickness="1,1,0,1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--垂直滚动条-->
    <Style x:Key="DatagridScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="10"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate  TargetType="{x:Type ScrollBar}">
                            <Grid >
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="18"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition MaxHeight="18"/>
                                </Grid.RowDefinitions>
                                <Border  Grid.RowSpan="3" CornerRadius="0" Background="#FFF2F2F2" />
                                <RepeatButton Grid.Row="0"  Style="{StaticResource ScrollBarLineButton}"  Height="18"   Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
                                <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true"  Width="10" >
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumb}" Background="#949CAF"  BorderBrush="#FFABABAB" BorderThickness="1,0,0,0"/>
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                                    </Track.IncreaseRepeatButton>
                                </Track>
                                <RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="mmhDataGridStyle" TargetType="DataGrid">
        <Setter Property="RowHeaderWidth" Value="0"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="IsEnabled" Value="True"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="AreRowDetailsFrozen" Value="False"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserResizeColumns" Value="True"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="BorderBrush" Value="#EDEDED"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="RowStyle" Value="{StaticResource ScrollerViewDatagridRowStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" 
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" 
                                                Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <DataGridColumnHeadersPresenter BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0,0,1" x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Style="{StaticResource DatagridScrollBar}"
                                                   Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Grid.RowSpan="3"/>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--Style TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <TextBlock TextAlignment="Center" Padding="0" VerticalAlignment="Center">    
                        <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected"  Value="True">
                <Setter Property="Foreground"  Value="Black" />
            </Trigger>
        </Style.Triggers>
    </-->
    <ControlTemplate x:Key="mmhColumnCell" TargetType="DataGridCell">
        <Border x:Name="Bg" Background="Transparent" Padding="0"  BorderThickness="0,0,1,1" UseLayoutRounding="True" BorderBrush="#EDEDED">
            <ContentPresenter HorizontalAlignment="Center"  VerticalAlignment="Center" Margin="0"/>
        </Border>
    </ControlTemplate>
    <Style x:Key="mmhColumnCellStyle" TargetType="DataGridCell">
        <Setter Property="FontSize" Value="14"/>

        <Setter Property="Template" Value="{StaticResource mmhColumnCell}">
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected"  Value="False">
                <!--<Setter Property="Background" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>-->
                <Setter Property="Foreground"  Value="#425177" />
            </Trigger>
            <Trigger Property="IsSelected"  Value="True">
                <Setter Property="Background" Value="#F5F6FF"/>
                <Setter Property="Foreground"  Value="#425177" />
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style x:Key="lastColumnCellStyle" TargetType="DataGridCell">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#425177"></Setter>
        <Setter Property="Template" x:Name="lastColumnCell">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border x:Name="Bg" Background="Transparent" Padding="0" BorderThickness="0,0,0,1" UseLayoutRounding="True" BorderBrush="#EDEDED">
                        <ContentPresenter HorizontalAlignment="Center"  VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected"  Value="True">
                <!--<Setter Property="Background" Value="White"/>
                <Setter Property="BorderThickness" Value="0"/>-->
                <Setter Property="Foreground"  Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LeftColumnCellStyle" TargetType="DataGridCell">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template" x:Name="lastColumnCell">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border x:Name="Bg" Background="Transparent" Padding="0" BorderThickness="0,0,1,1" UseLayoutRounding="True" BorderBrush="#EDEDED">
                        <ContentPresenter HorizontalAlignment="Left"  VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected"  Value="True">
                <!--<Setter Property="Background" Value="White"/>
                <Setter Property="BorderThickness" Value="0"/>-->
                <Setter Property="Foreground"  Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="mmhColumnTextLeftCell" TargetType="DataGridCell">
        <Border x:Name="Bg" Background="Transparent" Padding="0" BorderThickness="0,0,1,1" UseLayoutRounding="True" BorderBrush="#C9CFE2" >
            <ContentPresenter HorizontalAlignment="Left"  VerticalAlignment="Center" Margin="4,0,0,0"/>
        </Border>
    </ControlTemplate>
    <Style x:Key="mmhColumnTextLeftCellStyle" TargetType="DataGridCell">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template" Value="{StaticResource mmhColumnTextLeftCell}">
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected"  Value="True">
                <!--<Setter Property="Background" Value="White"/>
                <Setter Property="BorderThickness" Value="0"/>-->
                <Setter Property="Foreground"  Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CheckBoxColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Border x:Name="Bg" Background="Transparent" Padding="0" BorderThickness="0,0,0,1" UseLayoutRounding="True" BorderBrush="#EDEDED">
                        <ContentPresenter HorizontalAlignment="Center"  VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckBoxColumnCellStyle" TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border x:Name="Bg" Background="Transparent" Padding="0" BorderThickness="0,0,0,1" UseLayoutRounding="True" BorderBrush="#EDEDED">
                        <ContentPresenter HorizontalAlignment="Center"  VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="checkbox" TargetType="CheckBox">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Border BorderThickness="1" BorderBrush="#FFABABAB">
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <VisualBrush x:Key="HelpBlush" TileMode="None"  Stretch="None" AlignmentX="Left">
        <VisualBrush.Visual>
            <TextBlock FontStyle="Normal" Text="此项必填" FontSize="14" Foreground="#C5C5C5"/>
        </VisualBrush.Visual>
    </VisualBrush>

    <Style x:Key="tipsTextBox" TargetType="TextBox">
        <Setter Property="Padding" Value="8 0 0 0"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="#C9CFE2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Style.Triggers>
            <Trigger Property="Text" Value="{x:Null}">
                <Setter Property="Background" Value="{StaticResource HelpBlush}"/>
            </Trigger>
            <Trigger Property="Text" Value="">
                <Setter Property="Background" Value="{StaticResource HelpBlush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="GrayRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#586B9A"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Height" Value="36"></Setter>
        <Setter Property="SnapsToDevicePixels" Value="true"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border BorderBrush="#D8DFF3" BorderThickness="0,0,1,0">
                        <Grid x:Name="grid"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  ClipToBounds="True">
                            <Rectangle x:Name="ButtonStock"  Fill="{TemplateBinding Background}" Margin="0,0,0,0" StrokeThickness="1"/>
                            <ContentPresenter TextBlock.Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"  Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </Border>
                    <!--触发器：设置选中状态符号-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" Value="White"/>
                            <Setter Property="Foreground" Value="#4E7CED"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.6"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" TargetName="grid" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="mmhRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#FFABABAB"/>
        <Setter Property="Foreground" Value="#FF3E3A39"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="Height" Value="auto"></Setter>
        <Setter Property="SnapsToDevicePixels" Value="true"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border BorderBrush="#FFABABAB" BorderThickness="0,1,1,0">
                        <Grid x:Name="grid"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  ClipToBounds="True" >
                            <Rectangle x:Name="ButtonStock"  Fill="{TemplateBinding Background}"  RadiusX="0" RadiusY="0" Margin="0,0,0,0" StrokeThickness="1"/>
                            <ContentPresenter VerticalAlignment="Center"   Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </Border>
                    <!--触发器：设置选中状态符号-->
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="true">
                            <!--<Setter Property="BorderThickness" Value="0"/>-->
                            <!--<Setter Property="BorderBrush" Value="#FF37A22D"/>-->
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                                        <GradientStop Color="#FF1E92B7" Offset="0"/>
                                        <GradientStop Color="#FF1E92B7" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" Value="White"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.6"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" TargetName="grid" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="mmhGridLabelStyle" TargetType="Label">
        <Setter Property="BorderBrush" Value="#EDEDED"/>
        <Setter Property="Background" Value="#F9F9F9" />
        <Setter Property="Foreground" Value="#425177" />
        <Setter Property="BorderThickness" Value="1,0,0,1"/>
        <Setter Property="Padding" Value="24,7,7,7"/>
        <Setter Property="HorizontalContentAlignment"  Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="mmhGridContentStyle" TargetType="Label">
        <Setter Property="BorderBrush" Value="#EDEDED"/>
        <Setter Property="Background" Value="White" />
        <Setter Property="Padding" Value="24,7,7,7"/>
        <Setter Property="Foreground" Value="#425177" />
        <Setter Property="BorderThickness" Value="1,0,0,1"/>
        <Setter Property="HorizontalContentAlignment"  Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <!--弹窗头部颜色-->
    <Style x:Key="popUpHeaderDockpanleStyle" TargetType="DockPanel">
        <Setter Property="Background" Value="White"/>
    </Style>
    <!--  弹窗标题样式  -->
    <Style x:Key="popUpTitleStyle" TargetType="Label">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="16,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="#425177" />
    </Style>
    <!--  弹窗关闭按钮样式  -->
    <Style x:Key="popUPHeaderCloseImagStyle" TargetType="Image">
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Source" Value="/Resources/Common/close_icon.png"/>
        <Setter Property="Margin" Value="0,0,16,0" />
    </Style>

    <!--页面边距第二层boder样式-->
    <Style x:Key="pageBorderStyle2" TargetType="Border">
        <Setter Property="Padding" Value="16"/>
    </Style>
    <!--页面边距第一层boder样式-->
    <Style x:Key="pageBorerStyle1" TargetType="Border">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>
    <!--暂无数据样式-->
    <Style x:Key="WithoutDataStyle" TargetType="Label">
        <Setter Property="Margin" Value="0 50"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Image Source="/Resources/Common/wushuju.png" Width="32"/>
                        <Label Content="暂无数据" FontSize="18"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="primaryButton" TargetType="Button">
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="Padding" Value="16"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Background" Value="#4E7CED"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="3" Background="{TemplateBinding Background}" Padding="16 0">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}"></TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#6F94EF"></Setter>
                            <Setter Property="Foreground" Value="#FFFFFF"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="cancelButton" TargetType="Button">
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="Padding" Value="16"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Background" Value="#949CAF"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="3" Background="{TemplateBinding Background}" Padding="16 0">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}"></TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#7C8393"></Setter>
                            <Setter Property="Foreground" Value="#FFFFFF"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--默认按钮样式-->
    <Style x:Key="primaryBtn" TargetType="Border">
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="Padding" Value="8 0 12 0"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="Background" Value="#4E7CED"></Setter>
        <Setter Property="CornerRadius" Value="3"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#6F94EF"></Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#4E7CED"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--空心按钮样式-->
    <Style x:Key="outlineBtn" TargetType="Border">
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="Padding" Value="8 0 12 0"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="#4E7CED"></Setter>
        <Setter Property="CornerRadius" Value="3"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                            <GradientStop Color="#FFF2F2F2" Offset="0"/>
                            <GradientStop Color="#FFF2F2F2" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="false">
                <Setter Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="White" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--删除空心按钮样式-->
    <Style x:Key="deleteBtn" TargetType="Border">
        <Setter Property="Height" Value="32"></Setter>
        <Setter Property="Padding" Value="8 0 12 0"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="#FF6C6C"></Setter>
        <Setter Property="CornerRadius" Value="3"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                            <GradientStop Color="#FFF2F2F2" Offset="0"/>
                            <GradientStop Color="#FFF2F2F2" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="false">
                <Setter Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="White" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--新增图标和文字样式-->
    <Style x:Key="addDataStyle" TargetType="Label">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Image Source="/Resources/Common/add_icon.png" Width="20" Height="20" Margin="0 0 0 0"/>
                        <Label Content="新增" FontSize="14" Foreground="White"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--批量新增图标和文字样式-->
    <Style x:Key="addBatchDataStyle" TargetType="Label">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Image Source="/Resources/Common/upload_blue.png" Width="20" Height="20" Margin="0"/>
                        <Label Content="批量导入" FontSize="14" Foreground="#4E7CED"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--下载模板图标和文字样式-->
    <Style x:Key="downloadTempleteDataStyle" TargetType="Label">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Image Source="/Resources/Common/download_blue.png" Width="20" Height="20" Margin="0 0 0 0"/>
                        <Label Content="下载模板" FontSize="14" Foreground="#4E7CED"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--编辑图标和文字样式-->
    <Style x:Key="editDataStyle" TargetType="Label">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Image Source="/Resources/Common/edit.png" Width="20" Margin="16 0 0 0"/>
                        <Label Content="编辑" FontSize="14" Margin="6 0 16 0" Padding="0"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--删除图标和文字样式-->
    <Style x:Key="deleteDataStyle" TargetType="Label">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Image Source="/Resources/Common/delete_red.png" Width="20" Height="20" Margin="0 0 8 0"/>
                        <Label Content="删除" FontSize="14" Margin="0" Padding="0" Foreground="#FF6C6C"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>